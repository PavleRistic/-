// -lgdi32
#include<stdio.h>
#include<stdlib.h>
#include<stdbool.h>
#include<windows.h>
#include<stdint.h>
#include<conio.h>
float V=0,x=0,X=-1;
int G,A=0,T=0,L=0,N[200],E[200],duz,vis;bool I=true;
struct Rs{void* memory;BITMAPINFO bitmap_info;};Rs ren;
int GD(int l,int o,int r){if(o<l)return l;if(o>r)return r;return o;}
struct Ts{bool is_down;bool changed;};
enum{BUTTON_UP,BUTTON_DOWN,BUTTON_W,BUTTON_LEFT,BUTTON_RIGHT,BUTTON_ENTER,SPAC,BRj,};
struct Input{Ts buttons[BRj];};
void C(int x0,int y0,int x1,int y1,unsigned int color){x0=GD(0,x0,duz);x1=GD(0,x1,duz);y0=GD(0,y0,vis);y1=GD(0,y1,vis);
for(int y=y0;y<y1;y++){unsigned int* r=(unsigned int*)ren.memory+x0+y*duz;for(int x=x0;x<x1;x++){*r++=color;}}}
float R=0.01f;
void OB(float r,float o,float x,float y,int d,unsigned int c){C(r,o,r+d,y,c);C(r,o,x,o+d,c);C(x-d,o,x,y,c);C(r,y-d,x,y,c);}
void J(float x,float y,float h,float H,unsigned int c){x*=vis*R;y*=vis*R;h*=vis*R;H*=vis*R;x+=duz/2.f;y+=vis/2.f;int x0=x-h,x1=x+h,y0=y-H,y1=y+H;C(x0,y0,x1,y1,c);}
void JA(float x,float y,float h,float H,unsigned int c){x*=vis*R;y*=vis*R;h*=vis*R;H*=vis*R;x+=duz/2.f;y+=vis/2.f;C(x,y,x+h,y+H,c);}
const char* letters[][7]={
" 00",
"0  0",
"0  0",
"0000",
"0  0",
"0  0",
"0  0",

"0000",
"0",
"0",
"000",
"0  0",
"0  0",
"000",

"",
"",
"",
"",
"0000",
"00",
"00",

"000",
"0  0",
"0  0",
"0  0",
"0  0",
"0  0",
"000",

"0000",
"0",
"0",
"000",
"0",
"0",
"0000",

"0000",
"0",
"0",
"000",
"0",
"0",
"0",

" 000",
"0",
"0",
"0",
"0",
"0",
"0",

"0   0",
"0   0",
" 0 0",
"  0",
" 0 0",
"0   0",
"0   0",

"0  00",
"0  00",
"0 0 0",
"0 0 0",
"0 0 0",
"00  0",
"00  0",

" 000",
"   0",
"   0",
"   0",
"0  0",
"0  0",
" 000",

"0  0",
"0  0",
"0 0",
"00",
"0 0",
"0  0",
"0  0",

"0",
"0",
"0",
"0",
"0",
"0",
"0000",

"00 00",
"0 0 0",
"0 0 0",
"0   0",
"0   0",
"0   0",
"0   0",

"0  0",
"0  0",
"0  0",
"0000",
"0  0",
"0  0",
"0  0",

"0000",
"0  0",
"0  0",
"0  0",
"0  0",
"0  0",
"0000",

"00000",
"0   0",
"0   0",
"0   0",
"0   0",
"0   0",
"0   0",

" 000 ",
"0   0",
"0   0",
"0   0",
"0 0 0",
"0  0 ",
" 00 0",

"000",
"0  0",
"0  0",
"000",
"0   ",
"0   ",
"0   ",

" 000",
"0",
"0",
"0",
"0",
"0",
" 000 ",

"00000",
"  0",
"  0",
"  0",
"  0",
"  0",
"  0",

"0   0",
"0   0",
"0   0",
" 0 0",
"  0",
" 0",
"0",

"0   0",
"0   0",
"0   0",
"0   0",
"0   0",
" 0 0",
"  0",
"0   0",
"0   0",
"0   0",
"0   0",
"0   0",
" 0 0",
"  0",
"0   0",
"0   0",
"0   0",
"0   0",
"0   0",
" 0 0",
"  0",
" 0  0",
" 0 0",
" 0 0",
" 0 0",
"  0",
" 0",
"0",
"000",
"   00",
"    0",
" 0000",
"    0",
"   00",
"000",};
void TE(const char *text,float x,float y,float size,int c){
float h=size*.5f,original_y=y;
while(*text){if(*text!=32){const char** letter;letter=letters[*text-'A'];float original_x=x;
for(int i=0;i<7;i++){const char* row=letter[i];
while(*row){if(*row=='0'){J(x,y,h,h,c);}x+=size;row++;}y-=size;x=original_x;}}text++;x+=size*6.f;y=original_y;}}

void D(float x,float y,float size){int r=0;float h=size*.5f;unsigned int c;
while(r<200){if(E[r]==1)c=0xffff00;if(E[r]==2)c=0x800080;if(E[r]==3)c=0xff0000;if(E[r]==4)c=0x0000ff;if(E[r]==5)c=0x00ff00;if(E[r]==6)c=0xff7f00;if(E[r]==7)c=0x00ffff;
if(N[r]==0){J(x+r%10*3,y-r/10*3,h,h,0x7f7f7f);OB((x-h+r%10*3)*vis*R+duz/2,(y-r/10*3-h)*vis*R+vis/2,(x+h+r%10*3)*vis*R+duz/2,(y-r/10*3+h)*vis*R+vis/2,1,0x5f5f5f);}
else if(N[r]==1){J(x+r%10*3,y-r/10*3,h,h,c+99);OB((x-h+r%10*3)*vis*R+duz/2,(y-r/10*3-h)*vis*R+vis/2,(x+h+r%10*3)*vis*R+duz/2,(y-r/10*3+h)*vis*R+vis/2,1,c+9);}
else{J(x+r%10*3,y-r/10*3,h,h,c);OB((x-h+r%10*3)*vis*R+duz/2,(y-r/10*3-h)*vis*R+vis/2,(x+h+r%10*3)*vis*R+duz/2,(y-r/10*3+h)*vis*R+vis/2,1,c+19);}r++;}}

void BR(int n,float x,float y,float S,unsigned int c){float h=S*.5f;do{int r=n%10;n=n/10;switch(r){case 0:{J(x-S,y,h,2.5f*S,c);J(x+S,y,h,2.5f*S,c);J(x,y+S*2.f,h,h,c);J(x,y-S*2.f,h,h,c);x-=S*4.f;}break;case 1:{J(x+S,y,h,2.5f*S,c);x-=S*2.f;}break;case 2:{J(x,y+S*2.f,1.5f*S,h,c);J(x,y,1.5f*S,h,c);J(x,y-S*2.f,1.5f*S,h,c);J(x+S,y+S,h,h,c);J(x-S,y-S,h,h,c);x-=S*4.f;} break;case 3:{J(x-h,y+S*2.f,S,h,c);J(x-h,y,S,h,c);J(x-h,y-S*2.f,S,h,c);J(x+S,y,h,2.5f*S,c);x-=S*4.f;}break;case 4:{J(x+S,y,h,2.5f*S,c);J(x-S,y+S,h,1.5f*S,c);J(x,y,h,h,c);x-=S*4.f;}break;case 5:{J(x,y+S*2.f,1.5f*S,h,c);J(x,y,1.5f*S,h,c);J(x,y-S*2.f,1.5f*S,h,c);J(x-S,y+S,h,h,c);J(x+S,y-S,h,h,c);x-=S*4.f;}break;case 6:{J(x+h,y+S*2.f,S,h,c);J(x+h,y,S,h,c);J(x+h,y-S*2.f,S,h,c);J(x-S,y,h,2.5f*S,c);J(x+S,y-S,h,h,c);x-=S*4.f;}break;case 7:{J(x+S,y,h,2.5f*S,c);J(x-h,y+S*2.f,S,h,c);x-=S*4.f;}break;case 8:{J(x-S,y,h,2.5f*S,c);J(x+S,y,h,2.5f*S,c);J(x,y+S*2.f,h,h,c);J(x,y-S*2.f,h,h,c);J(x,y,h,h,c);x-=S*4.f;}break;case 9:{J(x-h,y+S*2.f,S,h,c);J(x-h,y,S,h,c);J(x-h,y-S*2.f,S,h,c);J(x+S,y,h,2.5f*S,c);J(x-S,y+S,h,h,c);x-=S*4.f;}break;}}while(n);}
#define is_down(b) input->buttons[b].is_down
#define PT(b)(input->buttons[b].is_down && input->buttons[b].changed)
#define released(b)(!input->buttons[b].is_down && input->buttons[b].changed)
int Z(int g,int y){int o=0;while(o<200){if(N[o]==2&&(o%10==g||N[o+y]==1||o+y>199))return 0;o++;}return 1;}
void La(){int r=200;if(Z(99,10))while(r>=0){if(N[r]==2){N[r]=0;N[r+10]=2;E[r+10]=E[r];E[r]=0;}r--;}}
void LE(){int r=0;while(r<200){if(N[r]==2){N[r]=0;N[r-1]=2;E[r-1]=E[r];E[r]=0;}r++;}}
void DE(){int r=200;while(r>=0){if(N[r]==2){N[r]=0;N[r+1]=2;E[r+1]=E[r];E[r]=0;}r--;}}
void GE(){int r=0;while(r<200){if(N[r]==2){N[r]=0;N[r-10]=2;E[r-10]=E[r];E[r]=0;}r++;}}
void Da(int r,int d,int o,int l,int h,int c,int v){while(r+o<0||r+d<0||r+l<0){La();r+=10;}while(r+o>200||r+d>200||r+l>200){GE();r-=10;}
if(N[r+d]!=1&&N[r+o]!=1&&N[r+l]!=1){if((r+o)%100/10==(r/10*10+5+o)%100/10&&(r+d)%100/10==(r/10*10+5+d)%100/10&&(r+l)%100/10==(r/10*10+5+l)%100/10){N[r+d]=2;N[r+o]=2;N[r+l]=2;N[r+h]=0;N[r+c]=0;N[r+v]=0;E[r+d]=E[r];E[r+o]=E[r];E[r+l]=E[r];E[r+h]=0;E[r+c]=0;E[r+v]=0;}
else if((r+o)%100/10>(r/10*10+5+o)%100/10||(r+d)%100/10>(r/10*10+5+d)%100/10||(r+l)%100/10>(r/10*10+5+l)%100/10)
{if((r+o-1)%100/10==(r/10*10+4+o)%100/10&&(r+d-1)%100/10==(r/10*10+4+d)%100/10&&(r+l-1)%100/10==(r/10*10+4+l)%100/10&&Z(0,-1)){LE();r-=1;N[r+d]=2;N[r+o]=2;N[r+l]=2;N[r+h]=0;N[r+c]=0;N[r+v]=0;E[r+d]=E[r];E[r+o]=E[r];E[r+l]=E[r];E[r+h]=0;E[r+c]=0;E[r+v]=0;}else if(Z(0,-1)&&Z(0,-2)&&(r+o-2)%100/10==(r/10*10+3+o)%100/10&&(r+d-2)%100/10==(r/10*10+3+d)%100/10&&(r+l-2)%100/10==(r/10*10+3+l)%100/10){LE();LE();r-=2;N[r+d]=2;N[r+o]=2;N[r+l]=2;N[r+h]=0;N[r+c]=0;N[r+v]=0;E[r+d]=E[r];E[r+o]=E[r];E[r+l]=E[r];E[r+h]=0;E[r+c]=0;E[r+v]=0;}}
else{if((r+o+1)%100/10==(r/10*10+6+o)%100/10&&(r+d+1)%100/10==(r/10*10+6+d)%100/10&&(r+l+1)%100/10==(r/10*10+6+l)%100/10&&Z(9,1)){DE();r+=1;N[r+d]=2;N[r+o]=2;N[r+l]=2;N[r+h]=0;N[r+c]=0;N[r+v]=0;E[r+d]=E[r];E[r+o]=E[r];E[r+l]=E[r];E[r+h]=0;E[r+c]=0;E[r+v]=0;}else if(Z(9,1)&&Z(9,2)&&(r+o+2)%100/10==(r/10*10+7+o)%100/10&&(r+d+2)%100/10==(r/10*10+7+d)%100/10&&(r+l+2)%100/10==(r/10*10+7+l)%100/10){DE();DE();r+=2;N[r+d]=2;N[r+o]=2;N[r+l]=2;N[r+h]=0;N[r+c]=0;N[r+v]=0;E[r+d]=E[r];E[r+o]=E[r];E[r+l]=E[r];E[r+h]=0;E[r+c]=0;E[r+v]=0;}}}}
void simulate_game(Input* input,float dt){
J(0,0,85,45,0x000044);
OB(0,0,duz,vis,55,0x1111ee);int r=0;
if(is_down(2))I=false;else if(G==1){
x+=dt/1000;int ddt=dt*100000;
V+=dt;if(1*V+x>1)V=77;if(V==77&&L!=0)L=0;if(PT(BUTTON_UP))T+=7;r=0;
if(PT(0))if(T%7==1)while(r<200){if(N[r]==2){if(N[r+10]!=2){Da(r,0,0,-9,2,999,999);break;}else{if(N[r+11]!=2){Da(r,0,0,11,20,999,999);break;}else if(N[r+20]!=2){Da(r,0,0,20,9,999,999);break;}else{Da(r,0,0,9,0,0,0);break;}}}r++;}else if(PT(0))if(T%7==2)while(r<200){if(N[r]==2){if(N[r+1]==2){Da(r,0,2,21,1,0,999);break;}else{Da(r,8,0,20,0,10,999);break;}break;}r++;}else if(PT(0))if(T%7==3)while(r<200){if(N[r]==2){if(N[r+1]==2){if(N[r+2]==2)Da(r,-9,10,11,0,2,12);else Da(r,21,9,11,0,1,20);break;}else{if(N[r+20]==2)Da(r,-1,9,11,0,20,19);else Da(r,1,2,21,0,10,12);break;}break;}r++;}else if(PT(0))if(T%7==4)while(r<200){if(N[r]==2){if(N[r+1]==2){if(N[r+2]==2)Da(r,-9,-10,11,0,2,10);else Da(r,10,2,12,0,1,21);break;}else{if(N[r+9]==2)Da(r,-1,19,20,0,8,10);else Da(r,19,9,11,0,20,21);break;}break;}r++;}else if(PT(0))if(T%7==5)while(r<200){if(N[r]==2){if(N[r+1]==2){Da(r,0,11,-10,9,10,999);break;}else{Da(r,0,19,20,21,0,999);break;}break;}r++;}else if(PT(0))if(T%7==6)while(r<200){if(N[r]==2){if(N[r+1]==2){Da(r,-8,-18,12,0,1,3);break;}else{Da(r,21,18,19,0,10,30);break;}break;}r++;}
r=200;if(T>27)T-=28;
if(PT(1)){if(Z(10,10))A+=1;La();}else if(V==77)La();r=0;if(V==77)V=0;
if(PT(3))if(Z(0,-1))LE();r=200;
if(PT(4))if(Z(9,1))DE();r=200;
if(PT(6))while(r>=0){if(Z(10,10)){A+=2;La();}else break;r-=10;}r=200;
while(r>=0){if(!Z(10,10))X+=1;if((X==10000||PT(6))&&!Z(10,10)){X=0;int o=0;while(o<200){if(N[o]==2)N[o]=1;o++;}
if(r!=5)if(ddt%10<1){T=0;N[5]=2;N[6]=2;N[15]=2;N[16]=2;E[5]=1;E[6]=1;E[15]=1;E[16]=1;}else if(ddt%10<3){T=1;N[5]=2;N[14]=2;N[15]=2;N[16]=2;E[5]=2;E[14]=2;E[15]=2;E[16]=2;}else if(ddt%10<5){T=2;N[5]=2;N[4]=2;N[15]=2;N[16]=2;E[5]=3;E[4]=3;E[15]=3;E[16]=3;}else if(ddt%10<7){T=3;N[5]=2;N[4]=2;N[16]=2;N[6]=2;E[5]=4;E[4]=4;E[16]=4;E[6]=4;}else if(ddt%10<8){T=4;N[5]=2;N[15]=2;N[25]=2;N[26]=2;E[5]=5;E[15]=5;E[25]=5;E[26]=5;}else if(ddt%10<9){T=5;N[5]=2;N[14]=2;N[15]=2;N[6]=2;E[5]=6;E[14]=6;E[15]=6;E[6]=6;}else{T=6;N[5]=2;N[6]=2;N[7]=2;N[4]=2;E[5]=7;E[6]=7;E[7]=7;E[4]=7;}else G=2;}r--;}r=199;
while(r>9){if(N[r]==1&&N[r-1]==1&&N[r-2]==1&&N[r-3]==1&&N[r-4]==1&&N[r-5]==1&&N[r-6]==1&&N[r-7]==1&&N[r-8]==1&&N[r-9]==1){for(int o=0;o<10;o++){N[r-o]=0;E[r-o]=0;}if(L==0)L=r;else L+=1000;X=70*dt;A+=20;for(int o=r-10;o>=0;o--){if(N[o]==1){N[o]=0;N[o+10]=1;E[o+10]=E[o];E[o]=0;}}}r-=10;}
BR(A,-30,-30,1.f,0xbbffbb);D(-10,30,3);if(L!=0)JA(-11.5,28.5-(L%1000)/10*3,30,(L/1000+1)*3,0x3377cc);
}else if(G==0){if(PT(BUTTON_ENTER))G=1;while(r<200){N[r]=0;E[r]=0;r++;}r=0;int ddt=dt*100000;if(ddt%10<1){T=0;N[5]=2;N[6]=2;N[15]=2;N[16]=2;E[5]=1;E[6]=1;E[15]=1;E[16]=1;}else if(ddt%10<3){T=1;N[5]=2;N[14]=2;N[15]=2;N[16]=2;E[5]=2;E[14]=2;E[15]=2;E[16]=2;}else if(ddt%10<5){T=2;N[5]=2;N[4]=2;N[15]=2;N[16]=2;E[5]=3;E[4]=3;E[15]=3;E[16]=3;}else if(ddt%10<7){T=3;N[5]=2;N[4]=2;N[16]=2;N[6]=2;E[5]=4;E[4]=4;E[16]=4;E[6]=4;}else if(ddt%10<8){T=4;N[5]=2;N[15]=2;N[25]=2;N[26]=2;E[5]=5;E[15]=5;E[25]=5;E[26]=5;}else if(ddt%10<9){T=5;N[5]=2;N[14]=2;N[15]=2;N[6]=2;E[5]=6;E[14]=6;E[15]=6;E[6]=6;}else{T=6;N[5]=2;N[6]=2;N[7]=2;N[4]=2;E[5]=7;E[6]=7;E[7]=7;E[4]=7;}TE("PRITISNI ENTER",-50,-10,1,0xff0000);TE("TETRIS",-75,40,4.5,0xffffff);
}else if(G==2){if(PT(BUTTON_ENTER))G=0;D(-10,30,3);BR(A,10,-30,2.f,0xbbffbb);A=0;TE("IZGUBIO SI",-50,0,1.5,0xff0000);}}
LRESULT CALLBACK window_callback(HWND hwnd,UINT uMsg,WPARAM wParam,LPARAM lParam){LRESULT result=0;
switch(uMsg){case WM_CLOSE:case WM_DESTROY:{I=false;}break;case WM_SIZE:{
RECT rect;GetClientRect(hwnd,&rect);
duz=rect.right-rect.left;vis=rect.bottom-rect.top;
int size=duz*vis*sizeof(unsigned int);
if(ren.memory)VirtualFree(ren.memory,0,MEM_RELEASE);
ren.memory=VirtualAlloc(0,size,MEM_COMMIT | MEM_RESERVE,PAGE_READWRITE);ren.bitmap_info.bmiHeader.biSize=sizeof(ren.bitmap_info.bmiHeader);ren.bitmap_info.bmiHeader.biWidth=duz;ren.bitmap_info.bmiHeader.biHeight=vis;ren.bitmap_info.bmiHeader.biPlanes=1;ren.bitmap_info.bmiHeader.biBitCount=32;ren.bitmap_info.bmiHeader.biCompression=BI_RGB;}break;
default:{result=DefWindowProc(hwnd,uMsg,wParam,lParam);}}return result;}
int WinMain(HINSTANCE hInstance,HINSTANCE hPrevInstance,LPSTR lpCmdLine,int nShowCmd){
ShowCursor(FALSE);WNDCLASS window_class={};window_class.style=CS_HREDRAW | CS_VREDRAW;window_class.lpszClassName="A";window_class.lpfnWndProc=window_callback;
RegisterClass(&window_class);
HWND window=CreateWindow(window_class.lpszClassName,"TETRIS",WS_OVERLAPPEDWINDOW | WS_VISIBLE,CW_USEDEFAULT,CW_USEDEFAULT,1280,720,0,0,hInstance,0);
{SetWindowLong(window,GWL_STYLE,GetWindowLong(window,GWL_STYLE) & ~WS_OVERLAPPEDWINDOW);
MONITORINFO mi={sizeof(mi)};
GetMonitorInfo(MonitorFromWindow(window,MONITOR_DEFAULTTOPRIMARY),&mi);
SetWindowPos(window,HWND_TOP,mi.rcMonitor.left,mi.rcMonitor.top,mi.rcMonitor.right-mi.rcMonitor.left,mi.rcMonitor.bottom-mi.rcMonitor.top,SWP_NOOWNERZORDER | SWP_FRAMECHANGED);}
HDC hdc=GetDC(window);
Input input={};
float delta_time=0.016666f;LARGE_INTEGER frame_begin_time;
QueryPerformanceCounter(&frame_begin_time);
float performance_frequency;{LARGE_INTEGER perf;QueryPerformanceFrequency(&perf);performance_frequency=(float)perf.QuadPart;}

while(I){MSG message;for(int i=0;i<BRj;i++){input.buttons[i].changed=false;}
while(PeekMessage(&message,window,0,0,PM_REMOVE)) {
switch(message.message){		
case WM_KEYUP:case WM_KEYDOWN:{
unsigned int vk_code=(unsigned int)message.wParam;
bool is_down=((message.lParam & (1<<31))==0);
#define tast(b,vk)\
case vk:{\
input.buttons[b].changed=is_down != input.buttons[b].is_down;\
input.buttons[b].is_down=is_down;}break;
switch(vk_code){tast(BUTTON_UP,VK_UP);tast(BUTTON_DOWN,VK_DOWN);tast(BUTTON_W,'W');tast(BUTTON_LEFT,VK_LEFT);tast(BUTTON_RIGHT,VK_RIGHT);tast(BUTTON_ENTER,VK_RETURN);tast(SPAC,VK_SPACE);}}break;default:{
TranslateMessage(&message);
DispatchMessage(&message);}}}
simulate_game(&input,delta_time);
StretchDIBits(hdc,0,0,duz,vis,0,0,duz,vis,ren.memory,&ren.bitmap_info,DIB_RGB_COLORS,SRCCOPY);
LARGE_INTEGER frame_end_time;
QueryPerformanceCounter(&frame_end_time);delta_time=(float)(frame_end_time.QuadPart-frame_begin_time.QuadPart)/performance_frequency;frame_begin_time=frame_end_time;}}
